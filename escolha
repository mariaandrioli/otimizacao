#!/usr/bin/env python3

FILENAME = "output.lp"

class graph:
	def __init__(self,gdict=None):
		if gdict is None:
			gdict = {}
		self.gdict = gdict

	def edges(self):
		return self.findedges()
	
	def getVertices(self):
		return list(self.gdict.keys())

# Find the distinct list of edges
	def findedges(self):
		edgename = []
		for vrtx in self.gdict:
				for nxtvrtx in self.gdict[vrtx]:
						if {nxtvrtx, vrtx} not in edgename:
								edgename.append({vrtx, nxtvrtx})
		return edgename
		
# Add the vertex as a key
	def addVertex(self, vrtx):
		if vrtx not in self.gdict:
				self.gdict[vrtx] = []

# Add the new edge
	def AddEdge(self, edge):
		edge = set(edge)
		(vrtx1, vrtx2) = tuple(edge)
		if vrtx1 in self.gdict:
				self.gdict[vrtx1].append(vrtx2)
		else:
				self.gdict[vrtx1] = [vrtx2]

def write_lp_format():
	return 0

def read_input():
	num_sedes, num_conexoes = input().split()
	num_sedes = int(num_sedes)
	num_conexoes = int(num_conexoes)

	sede_origem, sede_destino, demanda = input().split()
	sede_origem = int(sede_origem)
	sede_destino = int(sede_destino)
	demanda = int(demanda)

	custos = []
	for conexao in range(num_conexoes):
		aux = input().split()
		custos.append(int(aux[0]))
		custos.append(int(aux[1]))
		custos.append(float(aux[2]))

	return num_sedes, num_conexoes, sede_origem, sede_destino, demanda, custos

def criaGrafo(num_sedes, custos):
	graph_elements = {}
	g = graph(graph_elements)

	for i in range(num_sedes):
		g.addVertex(i)

	for i in range(0,len(custos),3):
		g.AddEdge({custos[i], custos[i+1]})

	return g

def criaDictCustos(conexoes,custos, demanda):
	custos_conexoes = {}

	j = 0
	for i in range(0,len(custos),3):
		custos_conexoes[tuple(conexoes[j])] = custos[i+2]*demanda
		j = j + 1
		
	return custos_conexoes

def primeiraUltima(sede, custos_conexoes, position):
	f = open(FILENAME, "a")

	aux = []
	for i in custos_conexoes:
		if i[position] == sede:
			aux.append(str(i[0]) + str(i[1]))
	for i in range(len(aux)-1):
			f.write('x' + str(aux[i]) + " + ")
	f.write('x' + str(aux[len(aux)-1]) + " = 1;\n")

	f.close()

def criaSaida(conexoes, custos_conexoes, num_conexoes, sede_origem, sede_destino):
	f = open(FILENAME, "w")
	print("custos entre vertices: ", custos_conexoes)

	vars = []
	for i in custos_conexoes:
		vars.append(str(custos_conexoes[i]) + ' x' + str(i[0]) + str(i[1]))

	# print(vars)
	# f.write("max: +143 x +60 y;\n+120 x +210 y <= 15000;\n+110 x +30 y <= 4000;\n+x +y <= 75;")
	f.write("min: ")
	for i in range(num_conexoes-1):
			f.write(str(vars[i]) + " + ")
	f.write(str(vars[num_conexoes-1]) + ";\n")
	f.close()

	primeiraUltima(sede_origem, custos_conexoes, 0)
	primeiraUltima(sede_destino, custos_conexoes, 1)
	# f.write('x' + str(i[0]) + str(i[1]) + " + ")

	#open and read the file after the appending:
	f = open(FILENAME, "r")
	print(f.read())

	return 0

def main():
	num_sedes, num_conexoes, sede_origem, sede_destino, demanda, custos = read_input()
	print("origem: ", sede_origem,"\ndestino: ", sede_destino, "\ndemanda: ", demanda)
	# print(custos)

	conexoes = criaGrafo(num_sedes, custos)
	
	custos_conexoes = criaDictCustos(conexoes.edges(), custos, demanda)

	criaSaida(conexoes, custos_conexoes, num_conexoes, sede_origem, sede_destino)

	return 0

if __name__ == "__main__":
	main()